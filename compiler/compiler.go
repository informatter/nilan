package compiler

import (
	"nilan/token"
)

// Represents the compiler which will compile
// a stream of `Token`'s to `Bytecode` to be executed
// by the VM
type Compiler struct {
	bytecode Bytecode
}

// Creates `Compiler` instance and returns
// a pointer to it.
func New() *Compiler {
	return &Compiler{
		bytecode: Bytecode{
			Instructions:  Instructions{},
			ConstantsPool: []any{},
		},
	}
}

// Compiles an array of `Token`'s into `Bytecode`
func (c *Compiler) Compile(tokens []token.Token) error {
	return nil
}

// Gets the `Bytecode` generated by the `Compiler`
func (c *Compiler) GetBytecode() Bytecode {
	return c.bytecode
}
